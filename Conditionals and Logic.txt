# CONDITIONALS AND LOGIC
------------------------

* Introduction to Conditionals & Logic
--------------------------------------
	Every program we’ve seen so far has only had one possible path of execution — they all execute line by line, from top to bottom. And every time you run one of those programs, it 
	gives you the same exact result. But it’s the twenty-first century, and we like options!

	In this lesson, we will explore how programs make decisions by evaluating conditions and introduce logic into our code!

	We’ll be covering the following concepts:

		. if, else if, and else statements
		. switch statements
		. Relational operators
		. Logical operators

	So… if you’ve already learned these concepts in another language, go to the next lesson — else, prepare yourself and let’s get started!

============================================================================================================================================================

* Coin Flip Demo
----------------
	Before we dive deep into the syntax of the if statement, let’s do a demo!

	Here, we have coinflip.cpp program that simulates a coin toss:

		. 50% of the time, it’s Heads.
		. 50% of the time, it’s Tails.

coinflip.cpp
------------
#include <iostream>
#include <stdlib.h>
#include <ctime>

int main() {
  
  // Create a number that's 0 or 1
  
  srand (time(NULL));
  int	coin = rand() % 2;
  
  // If number is 0: Heads
  // If it is not 0: Tails
  
  if (coin == 0) {
  
    std::cout << "Heads\n";
  
  }
	else {
	
    std::cout << "Tails\n";
  
  }
  
}

==================================================================================================================================================================

* If Statement
--------------
	An if statement is used to test an expression for truth and execute some code based on it. Here’s a simple form of the if statement:

		if (condition) {

  			some code

		}

	If the condition is true, then the statements within are executed. Otherwise, the statements are skipped and the program continues on.

		if (flip == 1) {
 
  			std::cout << "Heads\n";
 
		}

	The if keyword is followed by a set of parentheses (). Inside the parentheses (), a condition is provided that evaluates to true or false:

		. If the condition evaluates to true, the code inside the curly braces {} executes.

		. If the condition evaluates to false, the code won’t execute.

	So in the code above, if flip is equal to 1, the program outputs “Heads”; if it does not, then nothing happens and the program continues.

grade.cpp
---------
#include <iostream>

int main() {

  int grade = 90;
  
  if (grade > 60) {
    std::cout << "Pass";
  }
  
}

==================================================================================================================================================================


































