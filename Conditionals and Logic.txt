# CONDITIONALS AND LOGIC
------------------------

* Introduction to Conditionals & Logic
--------------------------------------
	Every program we’ve seen so far has only had one possible path of execution — they all execute line by line, from top to bottom. And every time you run one of those programs, it 
	gives you the same exact result. But it’s the twenty-first century, and we like options!

	In this lesson, we will explore how programs make decisions by evaluating conditions and introduce logic into our code!

	We’ll be covering the following concepts:

		. if, else if, and else statements
		. switch statements
		. Relational operators
		. Logical operators

	So… if you’ve already learned these concepts in another language, go to the next lesson — else, prepare yourself and let’s get started!

============================================================================================================================================================

* Coin Flip Demo
----------------
	Before we dive deep into the syntax of the if statement, let’s do a demo!

	Here, we have coinflip.cpp program that simulates a coin toss:

		. 50% of the time, it’s Heads.
		. 50% of the time, it’s Tails.

coinflip.cpp
------------
#include <iostream>
#include <stdlib.h>
#include <ctime>

int main() {
  
  // Create a number that's 0 or 1
  
  srand (time(NULL));
  int	coin = rand() % 2;
  
  // If number is 0: Heads
  // If it is not 0: Tails
  
  if (coin == 0) {
  
    std::cout << "Heads\n";
  
  }
	else {
	
    std::cout << "Tails\n";
  
  }
  
}

==================================================================================================================================================================

* If Statement
--------------
	An if statement is used to test an expression for truth and execute some code based on it. Here’s a simple form of the if statement:

		if (condition) {

  			some code

		}

	If the condition is true, then the statements within are executed. Otherwise, the statements are skipped and the program continues on.

		if (flip == 1) {
 
  			std::cout << "Heads\n";
 
		}

	The if keyword is followed by a set of parentheses (). Inside the parentheses (), a condition is provided that evaluates to true or false:

		. If the condition evaluates to true, the code inside the curly braces {} executes.

		. If the condition evaluates to false, the code won’t execute.

	So in the code above, if flip is equal to 1, the program outputs “Heads”; if it does not, then nothing happens and the program continues.

grade.cpp
---------
#include <iostream>

int main() {

  int grade = 90;
  
  if (grade > 60) {
    std::cout << "Pass";
  }
  
}

==================================================================================================================================================================

* Relational Operators
----------------------
	When writing conditional statements, sometimes we need to use different types of operators to compare values. These operators are called relational operators.

	To have a condition, we need relational operators:

		. == equal to
		. != not equal to
		. > greater than
		. < less than
		. >= greater than or equal to
		. <= less than or equal to

	Relational operators compare the value on the left with the value on the right.

grade.cpp
---------
#include <iostream>

int main() {

  int grade = 90;
  
  if (grade != 60) {
  
    std::cout << "Pass\n";
  
  }
  
}

==================================================================================================================================================================

* Else Clause
-------------
	We can also add an else clause to an if statement to provide code that will only be executed if the condition is false. Here’s a form of an if statement that includes an else 
	clause:

		if (condition) {

  			do something

		} else {

  			do something else

		}

		. If condition is true, statement1 is executed. Then the program skips statement2 and executes any code statements following the if/else clause.

		. If condition is false, statement1 is skipped and statement2 is executed. After statement2 completes, the program executes any code statements following the if/else 
		clause.

		if (coin == 1) {
 
  			std::cout << "Heads\n";
 
		}
		else {
 
  			std::cout << "Tails\n";
 
		}

	So in the code above, if coin is equal to 1, the program outputs “Heads”; if it does not, then it outputs “Tails”.

	Note: It’s either or — only one of them will execute!

grade.cpp
---------
#include <iostream>

int main() {

  int grade = 59;

  if (grade > 60) {

    std::cout << "Pass\n";

  }
  else {
    std::cout << "Fail\n";
  }

==================================================================================================================================================================

* Else If
---------
	So what happens if you want more than two possible outcomes?

	This is where else if comes in!

		if (condition) {

  			some code

		} else if (condition) {

  			some code

		} else {

  			some code

		}

	The else if statement always comes after the if statement and before the else statement. The else if statement also takes a condition.

	And you can have more than one of them! Here’s an example with three of them:

		if (grade == 9) {
 
  			std::cout << "Freshman\n";
 
		} 
		else if (grade == 10) {
 
  			std::cout << "Sophomore\n";
 
		}
		else if (grade == 11) {
 
  			std::cout << "Junior\n";
 
		} 
		else if (grade == 12) {
 
  			std::cout << "Senior\n";
 
		}
		else {
 
  			std::cout << "Super Senior\n";
 
		}

ph.cpp
------
#include <iostream>

int main() {
  
  double ph = 4.6;
  
  // Write the if, else if, else here:
  if (ph > 7)  {
    std::cout << "Basic\n";
  }
  else if (ph < 7) {
    std::cout << "Acidic\n";
  }
  else {
    std::cout << "Neutral]n";
  } 
}

==================================================================================================================================================================

































